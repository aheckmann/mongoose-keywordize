{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Mongoose-keywordize","tagline":"Derives keywords from document properties","body":"#Mongoose-keywordize Plugin\r\n\r\nProvides keyword derivation for [Mongoose](http://mongoosejs.com) documents.\r\n\r\n[![Build Status](https://secure.travis-ci.org/aheckmann/mongoose-keywordize.png)](http://travis-ci.org/aheckmann/mongoose-keywordize)\r\n\r\nOptions:\r\n\r\n  - `fields`: an array of paths you want watched and converted into keywords\r\n  - `fn`: optional function to execute when keywordize() runs; if a value is returned it is included in the keywords array\r\n  - `pre`: optional function to run against each value returned from each `field` before it's parsed and added to the keywords array\r\n  - `keywordField`: the name of the field in which keywords will be stored; defaults to `keywords`\r\n  - `upper`: true to retain letter casing. default is false (all keywords are lowercased)\r\n\r\nExample:\r\n\r\n```js\r\nvar schema = new Schema({ name: String, title: String });\r\nschema.plugin(keywordize, { fields: 'name title'.split(' ') });\r\n```\r\n\r\nThis will introduce a new `keywordize()` document method which detects if any of the passed fields have been modified and updates the new `keywords` property appropriately.\r\n\r\nExample:\r\n\r\n```js\r\nvar Person = mongoose.model('Person', schema);\r\nvar me = new Person({ name: 'aaron' });\r\nme.keywordize();\r\nconsole.log(me.keywords) // ['aaron']\r\n```\r\n\r\nThe `keywordize` method is always called upon saving each document, auto-updating to the latest keywords.\r\n\r\n```js\r\nme.title = 'Mr';\r\nme.save(function (err) {\r\n  console.log(me.keywords) // ['aaron', 'Mr']\r\n})\r\n```\r\n\r\n###index\r\n\r\nKeywordize, by default, does not define an index on the \"keywords\" key.\r\nIf you want to define an index you should use the \"index\" option:\r\n\r\n```js\r\nvar opts = {}\r\nopts.index = true\r\n```\r\n\r\n###pre\r\n\r\nTo have the opportunity to pre-process field values as they're retreived by the `keywordize` plugin before they are processed, pass an optional `pre` function. This function, when provided, will be run against each value returned from each `field` before it's parsed and added to the keywords array. The function is passed the `value` and field name.\r\n\r\n```js\r\nvar opts = {};\r\nopts.fields = ['description', 'title']\r\nopts.pre = function (value, field) {\r\n\t// remove html entities from each keyword picked from description\r\n\tif ('description' == field) {\r\n\t\treturn value.replace(/&#?[a-z0-9]{2,8};/ig, ' ');\r\n\t} else {\r\n\t\treturn value;\r\n\t}\r\n}\r\nvar schema = new Schema({ description: String, title: String });\r\nschema.plugin(keywordize, opts);\r\n\r\nvar Person = mongoose.model('Person', schema);\r\nvar me = new Person({ name: 'aaron' });\r\nme.description = 'Tall&nbsp;&amp;&nbsp;Awkward';\r\nme.keywordize();\r\nconsole.log(me.keywords) // ['aaron', 'tall', 'awkward']\r\n```\r\n\r\n###fn\r\n\r\nOne may also pass an optional function to run custom logic within the call to `keywordize`. The optional function will be executed within the context of the document, meaning we have access to the documents properties through the `this` keyword to perform any custom logic necessary.\r\n\r\n```js\r\nvar opts = {};\r\nopts.fields = ['name', 'title']\r\nopts.fn = function custom () {\r\n  if ('Mister' === this.title) {\r\n    return 'Mr';\r\n  }\r\n}\r\nvar schema = new Schema({ name: String, title: String });\r\nschema.plugin(keywordize, opts);\r\n\r\nvar Person = mongoose.model('Person', schema);\r\nvar me = new Person({ name: 'aaron' });\r\nme.title = 'Mister';\r\nme.keywordize();\r\nconsole.log(me.keywords) // ['aaron', 'Mister', 'Mr']\r\n```\r\n\r\n_Either a an `Array` or single string may be returned from the function and will be pushed onto the keywords array._\r\n\r\n###upper\r\n\r\nBy default mongoose-keywordize lowercases the keywords. To preserve casing pass the `upper: true` option.\r\n\r\n## Mongoose Version\r\n`>= 2.x`\r\n\r\n[LICENSE](https://github.com/aheckmann/mongoose-keywordize/blob/master/LICENSE)\r\n\r\n\r\n\r\n\r\n\r\n","google":"UA-30707590-1"}